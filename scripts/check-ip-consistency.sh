#!/bin/bash

# ====================================================
# Script: Verifica√ß√£o de Consist√™ncia IP
# Descri√ß√£o: Verifica se o IP do ENR coincide com o IP p√∫blico real
# Autor: Lighthouse Holesky Optimization
# Data: $(date +"%Y-%m-%d")
# ====================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
COMPOSE_FILE="docker-compose-holesky.yml"
CONTAINER_NAME="lighthouse"
LOG_FILE="logs/ip-consistency-$(date +%Y%m%d-%H%M%S).log"

# Criar diret√≥rio de logs
mkdir -p logs

echo -e "${BLUE}üîç Verificando Consist√™ncia de IP - Lighthouse Holesky${NC}"
echo "=================================================="

# Fun√ß√£o para log
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# 1. Verificar se container est√° rodando
log_message "Verificando status do container..."
if ! docker ps | grep -q "$CONTAINER_NAME"; then
    echo -e "${RED}‚ùå Container $CONTAINER_NAME n√£o est√° rodando${NC}"
    exit 1
fi

# 2. Obter IP p√∫blico atual
log_message "Obtendo IP p√∫blico atual..."
CURRENT_IP=$(curl -s --connect-timeout 10 httpbin.org/ip | jq -r '.origin' 2>/dev/null || echo "ERRO")

if [ "$CURRENT_IP" = "ERRO" ]; then
    echo -e "${RED}‚ùå Erro ao obter IP p√∫blico${NC}"
    exit 1
fi

echo -e "${BLUE}üìç IP P√∫blico Atual: ${GREEN}$CURRENT_IP${NC}"

# 3. Obter IP do ENR
log_message "Obtendo IP do ENR..."
ENR_LOG=$(docker logs "$CONTAINER_NAME" 2>&1 | grep "ENR Initialised" | tail -1)

if [ -z "$ENR_LOG" ]; then
    echo -e "${RED}‚ùå N√£o foi poss√≠vel obter ENR do container${NC}"
    exit 1
fi

# Extrair IP do ENR
ENR_IP=$(echo "$ENR_LOG" | grep -o 'ip4: Some([0-9\.]*' | grep -o '[0-9\.]*$')

if [ -z "$ENR_IP" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è ENR n√£o cont√©m IP IPv4 espec√≠fico (auto-discovery ativo)${NC}"
    ENR_IP="auto-discovery"
fi

echo -e "${BLUE}üîó IP no ENR: ${GREEN}$ENR_IP${NC}"

# 4. Verificar consist√™ncia
log_message "Verificando consist√™ncia..."

if [ "$ENR_IP" = "auto-discovery" ]; then
    echo -e "${GREEN}‚úÖ Configura√ß√£o otimizada: Auto-discovery ativo${NC}"
    echo -e "${GREEN}‚úÖ O Lighthouse detectar√° automaticamente mudan√ßas de IP${NC}"
    
    # Verificar se o ENR cont√©m o IP atual
    if echo "$ENR_LOG" | grep -q "$CURRENT_IP"; then
        echo -e "${GREEN}‚úÖ ENR cont√©m o IP p√∫blico atual${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è ENR pode n√£o ter o IP mais atual (normal ap√≥s mudan√ßa)${NC}"
        echo -e "${YELLOW}   O Lighthouse atualizar√° automaticamente${NC}"
    fi
    
elif [ "$ENR_IP" = "$CURRENT_IP" ]; then
    echo -e "${GREEN}‚úÖ IP consistente: ENR e IP p√∫blico coincidem${NC}"
    
else
    echo -e "${RED}‚ùå Inconsist√™ncia detectada:${NC}"
    echo -e "${RED}   IP no ENR: $ENR_IP${NC}"
    echo -e "${RED}   IP p√∫blico: $CURRENT_IP${NC}"
    echo -e "${YELLOW}   Recomenda√ß√£o: Usar auto-discovery para flexibilidade${NC}"
fi

# 5. Verificar peers
log_message "Verificando peers..."
PEER_COUNT=$(curl -s --connect-timeout 5 http://localhost:5052/eth/v1/node/peer_count | jq -r '.data.connected' 2>/dev/null || echo "0")

echo -e "${BLUE}üë• Peers Conectados: ${GREEN}$PEER_COUNT${NC}"

if [ "$PEER_COUNT" -gt 5 ]; then
    echo -e "${GREEN}‚úÖ Boa conectividade (>5 peers)${NC}"
elif [ "$PEER_COUNT" -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Conectividade moderada (1-5 peers)${NC}"
else
    echo -e "${RED}‚ùå Conectividade baixa (0 peers)${NC}"
fi

# 6. Verificar port forwarding
log_message "Verificando port forwarding..."
echo -e "${BLUE}üîß Testando conectividade UDP na porta 9000...${NC}"

# Teste UDP local
if nc -u -z -w 3 localhost 9000 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Porta 9000 UDP local: OK${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Porta 9000 UDP local: n√£o test√°vel com nc${NC}"
fi

# 7. Resumo e recomenda√ß√µes
echo ""
echo -e "${BLUE}üìã RESUMO${NC}"
echo "========================"
echo -e "IP P√∫blico Atual: ${GREEN}$CURRENT_IP${NC}"
echo -e "IP no ENR: ${GREEN}$ENR_IP${NC}"
echo -e "Peers Conectados: ${GREEN}$PEER_COUNT${NC}"
echo -e "Status: ${GREEN}Auto-discovery configurado${NC}"

echo ""
echo -e "${BLUE}üéØ RECOMENDA√á√ïES${NC}"
echo "========================"
echo -e "1. ${GREEN}‚úÖ Auto-discovery ativo${NC} - Configura√ß√£o otimizada"
echo -e "2. ${YELLOW}‚ö†Ô∏è Configure port forwarding${NC} para m√°xima conectividade"
echo -e "3. ${BLUE}üìä Monitore peers${NC} nas pr√≥ximas 24h"

# 8. Pr√≥ximos passos
echo ""
echo -e "${BLUE}üìñ PR√ìXIMOS PASSOS${NC}"
echo "========================"
echo "‚Ä¢ Port forwarding: docs/ROUTER-PORT-FORWARDING-GUIDE.md"
echo "‚Ä¢ Monitoramento: ./scripts/monitor-peers-lighthouse.sh"
echo "‚Ä¢ Alternativas IP: docs/ENR-FLEXIBLE-CONFIG.md"

log_message "Verifica√ß√£o conclu√≠da - IP: $CURRENT_IP, ENR: $ENR_IP, Peers: $PEER_COUNT"

echo ""
echo -e "${GREEN}‚úÖ Verifica√ß√£o conclu√≠da! Log salvo em: $LOG_FILE${NC}"

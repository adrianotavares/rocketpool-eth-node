#!/bin/bash
# Script para iniciar a testnet Hoodi
# Start script for Hoodi testnet

set -e

echo "üöÄ Iniciando Rocket Pool Node - Testnet Hoodi"
echo "=============================================="

# Configurar diret√≥rio
cd "$(dirname "$0")/.."

# Verificar se o arquivo existe
if [ ! -f "docker-compose-hoodi.yml" ]; then
    echo "‚ùå Erro: docker-compose-hoodi.yml n√£o encontrado!"
    exit 1
fi

# Verificar se o arquivo .env existe
if [ ! -f ".env.hoodi" ]; then
    echo "‚ùå Erro: .env.hoodi n√£o encontrado!"
    exit 1
fi

# Carregar vari√°veis de ambiente primeiro
echo "üìã Carregando vari√°veis de ambiente..."
set -a
source .env.hoodi
set +a

# Verificar se o SSD est√° montado
if [ ! -d "$SSD_MOUNT_PATH" ]; then
    echo "‚ùå Erro: SSD n√£o encontrado em $SSD_MOUNT_PATH"
    echo "   Verifique se o SSD est√° conectado e montado."
    exit 1
fi

# Criar diret√≥rios necess√°rios no SSD
echo "üìÅ Criando diret√≥rios de dados no SSD..."
mkdir -p "$ROCKETPOOL_DATA_PATH/secrets"
mkdir -p "$ROCKETPOOL_DATA_PATH/.rocketpool"
mkdir -p "$EXECUTION_DATA_PATH"
mkdir -p "$CONSENSUS_DATA_PATH"
mkdir -p "$PROMETHEUS_DATA_PATH"
mkdir -p "$GRAFANA_DATA_PATH"
mkdir -p "$ALERTMANAGER_DATA_PATH"

# Verificar se user-settings.yml existe no SSD
if [ ! -f "$ROCKETPOOL_DATA_PATH/.rocketpool/user-settings.yml" ]; then
    echo "‚ö†Ô∏è  Arquivo user-settings.yml n√£o encontrado no SSD!"
    echo "   Esperado em: $ROCKETPOOL_DATA_PATH/.rocketpool/user-settings.yml"
    echo "   O Rocket Pool pode n√£o funcionar corretamente sem este arquivo."
fi

# Gerar JWT secret se n√£o existir
if [ ! -f "$ROCKETPOOL_DATA_PATH/secrets/jwtsecret" ]; then
    echo "üîê Gerando JWT secret..."
    openssl rand -hex 32 > "$ROCKETPOOL_DATA_PATH/secrets/jwtsecret"
    echo "JWT secret gerado em $ROCKETPOOL_DATA_PATH/secrets/jwtsecret"
fi

# Configurar permiss√µes
echo "üîí Configurando permiss√µes..."
chmod 600 "$ROCKETPOOL_DATA_PATH/secrets/jwtsecret"
chmod -R 755 "$ROCKETPOOL_DATA_PATH"
chmod -R 755 "$EXECUTION_DATA_PATH"
chmod -R 755 "$CONSENSUS_DATA_PATH"
chmod -R 755 "$PROMETHEUS_DATA_PATH"
chmod -R 755 "$GRAFANA_DATA_PATH"
chmod -R 755 "$ALERTMANAGER_DATA_PATH"

# Mostrar informa√ß√µes dos diret√≥rios
echo "ÔøΩ Informa√ß√µes dos diret√≥rios criados:"
echo "   - Rocket Pool: $ROCKETPOOL_DATA_PATH"
echo "   - Execution:   $EXECUTION_DATA_PATH"
echo "   - Consensus:   $CONSENSUS_DATA_PATH"
echo "   - Prometheus:  $PROMETHEUS_DATA_PATH"
echo "   - Grafana:     $GRAFANA_DATA_PATH"
echo "   - Alertmanager: $ALERTMANAGER_DATA_PATH"

# Iniciar servi√ßos
echo "üê≥ Iniciando containers Docker..."
docker compose -f docker-compose-hoodi.yml --env-file .env.hoodi up -d

# Aguardar inicializa√ß√£o
echo "‚è±Ô∏è  Aguardando inicializa√ß√£o dos servi√ßos..."
sleep 10

# Verificar status
echo "üìä Verificando status dos servi√ßos..."
docker compose -f docker-compose-hoodi.yml ps

echo ""
echo "‚úÖ Rocket Pool Node - Testnet Hoodi iniciado com sucesso!"
echo ""
echo "üîó URLs de acesso:"
echo "   - Grafana: http://localhost:3000 (admin/admin123)"
echo "   - Prometheus: http://localhost:9090"
echo "   - Geth RPC: http://localhost:8545"
echo "   - Lighthouse API: http://localhost:5052"
echo "   - Node Exporter: http://localhost:9100"
echo ""
echo "üìù Para monitorar logs:"
echo "   docker compose -f docker-compose-hoodi.yml logs -f [service]"
echo ""
echo "‚ö†Ô∏è  Lembre-se de configurar port forwarding no roteador:"
echo "   - Geth P2P: 30304 (TCP/UDP)"
echo "   - Lighthouse P2P: 9001 (TCP/UDP)"
echo ""
echo "üíæ Dados armazenados no SSD:"
echo "   - Caminho base: $SSD_MOUNT_PATH/ethereum-data-hoodi/"
echo "   - Uso estimado: ~80-150GB ap√≥s sincroniza√ß√£o completa"
echo ""

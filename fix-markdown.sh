#!/bin/bash

# =============================================================================
# Fix Markdown - Corre√ß√£o Autom√°tica de Arquivos Markdown
# =============================================================================
# Script para corrigir problemas comuns em arquivos markdown
# Remove emojis dos t√≠tulos e corrige formata√ß√£o para padr√£o profissional
# =============================================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}============================================================${NC}"
echo -e "${BLUE}   Fix Markdown - Corre√ß√£o Autom√°tica de Arquivos MD${NC}"
echo -e "${BLUE}============================================================${NC}"
echo

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo -e "${YELLOW}Uso:${NC}"
    echo "  $0 [op√ß√µes] [arquivos...]"
    echo
    echo -e "${YELLOW}Op√ß√µes:${NC}"
    echo "  -h, --help      Mostra esta ajuda"
    echo "  -a, --all       Processa todos os arquivos .md do projeto"
    echo "  -s, --scripts   Processa apenas arquivos em scripts/"
    echo "  -d, --docs      Processa apenas arquivos em docs/"
    echo "  -b, --backup    Cria backup antes de modificar"
    echo "  -v, --verbose   Mostra detalhes das corre√ß√µes"
    echo
    echo -e "${YELLOW}Exemplos:${NC}"
    echo "  $0 --all                    # Corrige todos os arquivos .md"
    echo "  $0 --scripts --backup       # Corrige scripts/ com backup"
    echo "  $0 docs/README.md           # Corrige arquivo espec√≠fico"
    echo "  $0 --docs --verbose         # Corrige docs/ com detalhes"
}

# Vari√°veis de controle
BACKUP=false
VERBOSE=false
PROCESS_ALL=false
PROCESS_SCRIPTS=false
PROCESS_DOCS=false
FILES=()

# Processar argumentos
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -a|--all)
            PROCESS_ALL=true
            shift
            ;;
        -s|--scripts)
            PROCESS_SCRIPTS=true
            shift
            ;;
        -d|--docs)
            PROCESS_DOCS=true
            shift
            ;;
        -b|--backup)
            BACKUP=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -*)
            echo -e "${RED}Op√ß√£o desconhecida: $1${NC}"
            show_help
            exit 1
            ;;
        *)
            FILES+=("$1")
            shift
            ;;
    esac
done

# Fun√ß√£o para fazer backup
make_backup() {
    local file="$1"
    if [ "$BACKUP" = true ]; then
        cp "$file" "$file.backup.$(date +%Y%m%d_%H%M%S)"
        echo -e "${GREEN}[BACKUP]${NC} Backup criado para $file"
    fi
}

# Fun√ß√£o para verificar se o arquivo precisa de corre√ß√£o
needs_correction() {
    local file="$1"
    
    # Verificar se h√° emojis em t√≠tulos
    if grep -q "^#.*[üéØüìä‚öôÔ∏èüîßüß™üìàüöÄüîÑüìùüè∑Ô∏èüîçüõ†Ô∏èüìÅ]" "$file"; then
        return 0
    fi
    
    # Verificar se h√° emphasis usado como heading
    if grep -q "^\*\*.*\*\*$" "$file"; then
        return 0
    fi
    
    # Verificar se h√° it√°lico usado como heading
    if grep -q "^\*[^*]*\*$" "$file"; then
        return 0
    fi
    
    # Verificar se h√° t√≠tulos com emojis espec√≠ficos
    if grep -q "^#.*[üéâ‚úÖ‚ùå‚ö†Ô∏èüí°üî•üéäüéÅüéàüéÄüåü‚≠êüèÜü•áüé™üé®üé≠üéØüé≤üé≥üéÆüé∞üé±üé≤üé∏üéπüé∫üéªüéºüéµüé∂üé§üéßüé¨üé•üìπüì∑üì∏üì∫üìªüì°]" "$file"; then
        return 0
    fi
    
    return 1
}

# Fun√ß√£o para processar um arquivo
process_file() {
    local file="$1"
    
    if [ ! -f "$file" ]; then
        echo -e "${RED}[ERRO]${NC} Arquivo n√£o encontrado: $file"
        return 1
    fi
    
    # Verificar se precisa de corre√ß√£o
    if ! needs_correction "$file"; then
        if [ "$VERBOSE" = true ]; then
            echo -e "${GREEN}[OK]${NC} $file j√° est√° correto"
        fi
        return 0
    fi
    
    echo -e "${YELLOW}[PROCESSANDO]${NC} $file"
    
    # Fazer backup se solicitado
    make_backup "$file"
    
    # Contador de corre√ß√µes
    local corrections=0
    
    # Arquivo tempor√°rio
    local temp_file=$(mktemp)
    
    # Aplicar corre√ß√µes usando sed
    sed \
        -e 's/^# üõ†Ô∏è /# /' \
        -e 's/^# üìä /# /' \
        -e 's/^# ‚öôÔ∏è /# /' \
        -e 's/^# üß™ /# /' \
        -e 's/^# üîß /# /' \
        -e 's/^# üìà /# /' \
        -e 's/^# üéØ /# /' \
        -e 's/^# üìÅ /# /' \
        -e 's/^# üöÄ /# /' \
        -e 's/^# üîÑ /# /' \
        -e 's/^# üìù /# /' \
        -e 's/^# üè∑Ô∏è /# /' \
        -e 's/^# üîç /# /' \
        -e 's/^# üéâ /# /' \
        -e 's/^# ‚úÖ /# /' \
        -e 's/^## üéØ /## /' \
        -e 's/^## üìÅ /## /' \
        -e 's/^## üöÄ /## /' \
        -e 's/^## üìä /## /' \
        -e 's/^## ‚öôÔ∏è /## /' \
        -e 's/^## üéØ /## /' \
        -e 's/^## üîÑ /## /' \
        -e 's/^## üìà /## /' \
        -e 's/^## üö® /## /' \
        -e 's/^## üîß /## /' \
        -e 's/^## üìù /## /' \
        -e 's/^## üè∑Ô∏è /## /' \
        -e 's/^## üîç /## /' \
        -e 's/^## üéâ /## /' \
        -e 's/^## ‚úÖ /## /' \
        -e 's/^## üìã /## /' \
        -e 's/^### üìä /### /' \
        -e 's/^### ‚öôÔ∏è /### /' \
        -e 's/^### üéØ /### /' \
        -e 's/^### üîÑ /### /' \
        -e 's/^### üìà /### /' \
        -e 's/^### üö® /### /' \
        -e 's/^### üîß /### /' \
        -e 's/^### üéâ /### /' \
        -e 's/^### ‚úÖ /### /' \
        -e 's/^### üìã /### /' \
        -e 's/^\*\*\([^*]*\)\*\*$/\1/' \
        -e 's/^\*\([^*]*\)\*$/\1/' \
        "$file" > "$temp_file"
    
    # Verificar se houve mudan√ßas
    if ! diff -q "$file" "$temp_file" > /dev/null; then
        mv "$temp_file" "$file"
        echo -e "${GREEN}[CORRIGIDO]${NC} $file"
        
        if [ "$VERBOSE" = true ]; then
            echo -e "  ${BLUE}‚Üí${NC} Emojis removidos dos t√≠tulos"
            echo -e "  ${BLUE}‚Üí${NC} Formata√ß√£o padronizada"
        fi
    else
        rm "$temp_file"
        if [ "$VERBOSE" = true ]; then
            echo -e "${GREEN}[OK]${NC} $file n√£o precisava de corre√ß√£o"
        fi
    fi
}

# Fun√ß√£o para encontrar arquivos
find_files() {
    local pattern="$1"
    local dir="$2"
    
    if [ -d "$dir" ]; then
        find "$dir" -name "$pattern" -type f | sort
    fi
}

# Determinar quais arquivos processar
if [ "$PROCESS_ALL" = true ]; then
    echo -e "${YELLOW}Processando todos os arquivos .md do projeto...${NC}"
    while IFS= read -r -d '' file; do
        FILES+=("$file")
    done < <(find . -name "*.md" -type f -print0)
elif [ "$PROCESS_SCRIPTS" = true ]; then
    echo -e "${YELLOW}Processando arquivos em scripts/...${NC}"
    while IFS= read -r file; do
        FILES+=("$file")
    done < <(find_files "*.md" "scripts")
elif [ "$PROCESS_DOCS" = true ]; then
    echo -e "${YELLOW}Processando arquivos em docs/...${NC}"
    while IFS= read -r file; do
        FILES+=("$file")
    done < <(find_files "*.md" "docs")
elif [ ${#FILES[@]} -eq 0 ]; then
    echo -e "${YELLOW}Nenhum arquivo especificado. Use --help para ver op√ß√µes.${NC}"
    exit 1
fi

# Processar arquivos
echo -e "${BLUE}Arquivos a processar: ${#FILES[@]}${NC}"
echo

processed=0
corrected=0

for file in "${FILES[@]}"; do
    if process_file "$file"; then
        processed=$((processed + 1))
        if needs_correction "$file" 2>/dev/null; then
            :
        else
            corrected=$((corrected + 1))
        fi
    fi
done

echo
echo -e "${BLUE}============================================================${NC}"
echo -e "${BLUE}   Resumo das Corre√ß√µes${NC}"
echo -e "${BLUE}============================================================${NC}"
echo -e "${GREEN}Arquivos processados: $processed${NC}"
echo -e "${GREEN}Arquivos corrigidos: $corrected${NC}"

if [ "$BACKUP" = true ]; then
    echo -e "${YELLOW}Backups criados com timestamp${NC}"
fi

echo -e "${GREEN}Corre√ß√µes conclu√≠das!${NC}"
